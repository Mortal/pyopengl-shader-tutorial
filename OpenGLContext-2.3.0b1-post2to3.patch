diff --git a/OpenGLContext/scenegraph/arraygeometry.py b/OpenGLContext/scenegraph/arraygeometry.py
index b54dfe4..ec58a08 100644
--- a/OpenGLContext/scenegraph/arraygeometry.py
+++ b/OpenGLContext/scenegraph/arraygeometry.py
@@ -1,7 +1,6 @@
 """Vertex-array-based geometry node for faces, lines and points"""
 from OpenGL.GL import *
 from OpenGLContext.arrays import *
-from . import polygonsort
 from OpenGLContext import triangleutilities
 from OpenGL.arrays import vbo
 import logging
@@ -201,6 +200,7 @@ class ArrayGeometry(object):
         """
         if not hasattr( self, 'centers'):
             self.centers = triangleutilities.centers( self.vertices )
+        from . import polygonsort
         indices = polygonsort.indices(
             polygonsort.distances(
                 self.centers, 
diff --git a/OpenGLContext/scenegraph/boundingvolume.py b/OpenGLContext/scenegraph/boundingvolume.py
index e155ff7..992cb7f 100644
--- a/OpenGLContext/scenegraph/boundingvolume.py
+++ b/OpenGLContext/scenegraph/boundingvolume.py
@@ -31,7 +31,6 @@ from vrml.vrml97 import nodetypes
 from vrml import node, field, protofunctions, cache
 from OpenGLContext import frustum, utilities, doinchildmatrix
 from OpenGL.extensions import alternate
-import exceptions
 import logging
 log = logging.getLogger( __name__ )
 
@@ -47,7 +46,7 @@ try:
 except ImportError:
     frustcullaccel = None
 
-class UnboundedObject( exceptions.ValueError ):
+class UnboundedObject( ValueError ):
     """Error raised when an object does not support bounding volumes"""
 
 class BoundingVolume( node.Node ):
diff --git a/OpenGLContext/scenegraph/text/font.py b/OpenGLContext/scenegraph/text/font.py
index fbbce1e..a11aed3 100644
--- a/OpenGLContext/scenegraph/text/font.py
+++ b/OpenGLContext/scenegraph/text/font.py
@@ -42,7 +42,7 @@ class Font(object):
         """
         if __debug__:
             log.info( """normalise %r for %s""", repr(value), self, )
-        if isinstance( value, str ):
+        if hasattr(value, 'decode'):
             value = value.decode( 'utf-8' )
         return value
     def toLines( self, value, mode=None ):
